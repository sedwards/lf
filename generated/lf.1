.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "LF" 1 "2007-07-19" "" ""
.SH NAME
lf \- list files, sorted by extensions, in a terse format
.SH "SYNOPSIS"
.ad l
.hy 0
.HP 3
\fBlf\fR [\fIOPTION\fR\&.\&.\&.] [\fIFILE\fR\&.\&.\&.]
.ad
.hy

.SH "DESCRIPTION"

.PP
\fBlf\fR is a command\-line tool for listing files, similar in some ways to \fBls(1)\fR\&. \fBlf\fR sorts the filenames by extension, and displays them in a terse output format\&. Here is an example:

.nf

DIRS: bak junk
    : apples filelist\&.md5sum makefile README
   c: bar baz foo
   o: baz foo
 txt: readme

.fi

.PP
Directory names are shown first, marked by the string "DIRS"; directories with extensions are not treated specially\&. If any files with no extension are present they will be listed next, followed by any files that do have extensions\&. In each case the extension is printed, followed by a list of filenames with the extension removed\&.

.PP
Some extensions are ignored\&. Filenames with extensions that are too long (default: longer than 4 characters) are treated as if there were no extension in the filename\&. In the example above, filelist\&.md5sum fell under this rule and was put on the line for files with no extension\&.

.PP
If you specify no filename arguments, \fBlf\fR will list the files in the current directory\&. If you specify one filename argument, \fBlf\fR will list it; if it is a directory, \fBlf\fR will list the files contained in that directory\&.

.PP
If you specify multiple filename arguments and some of them are directories, \fBlf\fR will list the contents of the directories\&. Here is an example: suppose you had two directories, foo and bar, and they had some files in them\&. This is the result if you run \fBlf foo bar\fR:

.nf

    : bar/notes foo/README
   c: bar/foocode foo/barcode
   h: bar/foocode foo/barcode

.fi

.PP
If you instead called \fBlf\fR with the \-\-directory (\-d) argument, the contents of directories would not be read\&. You would get a result like this:

.nf

DIRS: bar foo

.fi

.PP
 \fBlf\fR treats files of the format "foo\-1\&.23" specially\&. Files with names like this don't really have a sensible extension, and it's better to have them listed with the no\-extension files\&. When any filename contains a dash ('\-'), followed by zero or more digits, followed by a period ('\&.'), followed by one or more digits, \fBlf\fR treats the filename as if it had no extension\&.

.PP
The extensions are printed in sorted order, and the filenames are sorted as well within each line\&.

.PP
If any files have a dot as the last character of their filename, \fBlf\fR will consider their extension to be "\&." (a single dot)\&. Other than this special case, \fBlf\fR prints file extensions without a dot\&.

.PP
 \fBlf\fR tries to get the user's default locale, and use locale\-specific functions for sorting filenames\&. (If \fBlf\fR is called with the \-\-force\-lower\-case option, the user's default locale is used for the lower\-case function too\&.) If \fBlf\fR is unable to get the locale, it will fall back to the "C" locale which is based on plain ASCII\&.

.PP
Removing the extensions from the filenames saves some space, and you can fit quite a bit of information into one screen\&. Also, it can be valuable to see your files sorted by extension; you can quickly tell what kinds of files are in the directory\&.

.PP
Like \fBls(1)\fR, if invoked with no filenames specified as arguments, \fBlf\fR will list the files in the current directory\&.

.SH "OPTIONS"

.TP
\fB\-\-license\fR, \fB\-\-licence\fR
Show the text of the free software license under which \fBlf\fR is distributed\&.

.TP
\fB\-a\fR, \fB\-\-show\-all\fR
Include files that would normally be hidden\&. On Linux and *NIX file systems, filenames that start with a period ('\&.') would normally be hidden\&.

.TP
\fB\-A\fR, \fB\-\-ascii\fR
Sort by ASCII values of characters in filenames rather than the default locale\&. Case\-sensitive\&.

.TP
\fB\-I\fR, \fB\-\-ascii\-ic\fR
Sort by ASCII values of characters in filenames rather than the default locale\&. Case\-insensitive\&.

.TP
\fB\-L\fR, \fB\-\-locale\fR
Sort according to the default locale\&. This is \fB\fBlf\fR\fR's default behavior\&.

.TP
\fB\-d\fR, \fB\-\-directory\fR
Print directory names as if they were filenames, rather than listing their files\&.

.TP
\fB\-X <number>\fR, \fB\-\-ext\-spacing=<number>\fR
Sets the width reserved on each line for the extension\&. Extensions shorter than this are right\-justified within this width\&. The default value is 4\&.

.TP
\fB\-Z <number>\fR, \fB\-\-ext\-width\-limit=<number>\fR
Sets the limit on how long an extension can be\&. Any extension longer than this limit is ignored (the filename is treated as if it did not contain any extension)\&. The default value is 4\&.

.TP
\fB\-F\fR, \fB\-\-force\-lower\-case\fR
Forces all filenames (including directory names) to lower case\&. This is mainly useful if you are dealing with a file system that only contains upper\-case filenames, such as an old FAT file system\&.

.TP
\fB\-N <string>\fR, \fB\-\-name\-separator=<string>\fR
Specify a different separator to print between base filenames\&. The default separator is a single space\&. You could, for example, set the separator to a comma and a space (", ") if you have many filenames with spaces in them and you want to make it easier to tell where the files actually end\&.

.TP
\fB\-S <string>\fR, \fB\-\-replace\-spaces=<string>\fR
Specifies a string that will replace spaces in filenames in the listing\&. You could, for example, set this to '*' and then the filename "this is my file" would print as "this*is*my*file"\&. (Note that the shell expands a '*' so you will need to quote it\&.)

.TP
\fB\-w <number>\fR, \fB\-\-line\-width=<number>\fR
Format output in lines of this many characters or fewer\&. The default value is 80\&. \fBlf\fR will start a new line of output if printing a filename would make the line longer than this limit\&.

In a graphical desktop environent the available width of lines in a terminal emulator can change if the window is resized\&. The \fBbash(1)\fR shell has a shell variable, COLUMNS, that always contains the current line width\&. With the command "export COLUMNS" you can make it into an environment variable, and \fBlf\fR will be able to retrieve its value\&. You could then set the LFOPTS environment variable to include "\-\-line\-width=$COLUMNS", and when you resize the width of your terminal emulator, \fBlf\fR will print listings that fit perfectly in the new width of the terminal emulator\&. If you do this, you can use the \-\-margin (\-M) option to keep filenames from going all the way to the end of the line\&.

.TP
\fB\-M <number>\fR, \fB\-\-margin=<number>\fR
Reserve (leave blank) this many spaces on the right side of each line\&. The default value is 0, so by default \fBlf\fR will print filenames all the way to the full line width\&.

.TP
\fB\-v <number>\fR, \fB\-\-verbose=<number>\fR
Control how verbose the output is\&. Currently three levels are defined: 

0: just print filenames\&.

1: print a header showing directory being listed, then print filenames\&.

2: print a report on how options are set, then print the same output as level 1\&.
 

.TP
\fB\-V\fR, \fB\-\-version\fR
Show version information\&. Complies with GNU standard \-\-version format\&.

.SH "SEE ALSO"

.PP
 SourceForge project for lf: \fIhttp://sourceforge.net/projects/lf1/\fR 

.SH "ENVIRONMENT VARIABLES"

.PP
If you set a variable called LFOPTS in the environment, lf will parse it for options\&. These will be treated the same as if they had been typed as command\-line arguments to lf\&. If an option is set in LFOPTS and set a different way from the command\-line, the command\-line argument will override the argument in LFOPTS\&.

.PP
For example, if you often work with extensions 5 characters long, you might want to set LFOPTS like so:

.PP
export LFOPTS="\-\-ext\-spacing=5 \-\-ext\-width\-limit=5"

.SH "HISTORY"

.PP
In the 1980's I used a freeware program for MS\-DOS called LF\&.COM, which listed files sorted by extension, and which gave me the idea for this program\&. The author of LF\&.COM was not listed in the program anywhere, nor was source code available\&. Whoever wrote LF\&.COM: thank you!

.SH "AUTHOR"

.PP
Written by Steve R\&. Hastings\&.

.SH "REPORTING BUGS"

.PP
Report bugs to: lf@langri\&.com

.SH "COPYRIGHT"

.PP
Copyright Â© 2007 Steve R\&. Hastings\&.

.PP
This is free software; see the source code for copying conditions\&. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE\&.

.SH "BUGS"

.PP
If you use the \-\-force\-lower\-case (\-F) option when running lf on a file system that allows mixed\-case filenames, and there are two filenames that differ only by case, lf will silently show only one name for both\&. In other words, if both names are identical when forced to lower\-case, lf will treat them as a single file\&.

.SH AUTHOR
Steve Hastings.
